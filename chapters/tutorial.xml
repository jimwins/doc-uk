<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 08bce8d11d3d2a7d0461c17138d61b9da5be817a Maintainer: mproshchuk Status: ready -->
 <chapter xml:id="tutorial" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <info><title>Простий підручник</title></info>

  <para>
   В цьому короткому та простому підручнику ми б хотіли показати самі основи 
   PHP. В даному матеріалі описується лише створення динамічних сторінок з PHP,
   хоча PHP придатна не тільки для створення вебсторінок. Прогляньте розділ з
   назвою <link linkend="intro-whatcando">Що може PHP</link> для докладної
   інформації.
  </para>
  <para>
   Вебсторінки, створені за допомогою PHP, обробляються як звичайні сторінки
   HTML. Створювати та редагувати їх можна в той же спосіб, що і звичайні
   сторінки HTML.
  </para>

  <section xml:id="tutorial.requirements">
   <info><title>Що мені потрібно?</title></info>
   <para>
    Ми припускаємо, що на вашому вебсервері активовано підтримку PHP, а всі
    файли із закінченням <filename>.php</filename> обробляються через PHP. На
    більшості серверів дане розширення початково обробляється через PHP, але
    краще уточнити це у вашого вебадміністратора. Якщо ваш сервер підтримує PHP,
    то ви маєте все необхідне. Просто створюйте файли із закінченням
    <filename>.php</filename>, кладіть їх у вебтеку, а сервер оброблятиме їх
    автоматично. Немає потреби будь-що компілювати чи встановлювати додаткові
    інструменти. Вважайте файли PHP простими файлами HTML з набором нових
    магічних тегів, що дозволяють вам робити купу різних речей.
   </para>
   <para>
    Мабуть ви захочете заощадити дорогоцінну пропускну здатність та вести
    розробку в себе на домашньому комп'ютері. В цьому випадку, вам потрібно
    встановити вебсервер на кшталт
    <link xlink:href="&url.apache;">Apache</link> та, звичайно ж,
    <link xlink:href="&url.php.downloads;">PHP</link>. Скоріш за все, ви також
    захочете встановити базу даних, наприклад
    <link xlink:href="&url.mysql.docs;">MySQL</link>.
   </para>
   <para>
    Ви можете встановлювати їх всіх окремо або ж обрати простіший варіант. Наш
    посібник має <link linkend="install">інструкції встановлення для PHP</link>
    (припускаючи, що ви вже маєте робочий вебсервер). Якщо ви маєте проблеми з
    встановленням PHP, ми пропонуємо поставити ваші запитання через
    <link xlink:href="&url.php.mailing-lists;">список розсилки стосовно
    інсталяції</link>. Якщо ж ви вирішете обрати більш простіший спосіб, можете
    <link xlink:href="&url.installkits;">знайти готовий пакет</link> для вашої
    операційної системи, що автоматично встановлює все вищезазначене кількома
    кліками миші. Встановлювати вебсервер з підтримкою PHP досить просто на
    будь-якій Операційній Системі, включаючи MacOSX, Linux та Windows. На Linux
    вам, можливо, згодяться <link xlink:href="&url.rpmfind;">rpmfind</link>
    та <link xlink:href="&url.rpmfind.pbone;">PBone</link> для пошуку
    RPMs-пакетів. Можна також використовувати
    <link xlink:href="&url.apt-get;">apt-get</link> для пошуку пакетів в Debian.
   </para>
  </section>

  <section xml:id="tutorial.firstpage">
   <info><title>Перша сторінка на PHP</title></info>
   <para>
    Створіть файл з назвою <filename>hello.php</filename> в кореневій теці
    вашого вебсервера (<varname>DOCUMENT_ROOT</varname>) та додайте в нього
    такий вміст:
   </para>
   <para>
    <example>
     <info>
      <title>Перший скрипт на PHP: <filename>hello.php</filename></title>
     </info>
     <programlisting role="php">
<![CDATA[
<!DOCTYPE html>
<html>
    <head>
        <title>Тестуємо PHP</title>
    </head>
    <body>
        <?php echo '<p>Привіт, Світ</p>'; ?> 
    </body>
</html>
]]>
     </programlisting>
     <simpara>
      Щоб отримати доступ до цього файлу, використовуйте браузер - в полі адреси
      введіть назву вашого вебсервера та допишіть <literal>/hello.php</literal>.
      Якщо ви розробляєте скрипти локально (на своєму домашньому комп'ютері),
      введена адреса повинна мати вигляд
      <literal>http://localhost/hello.php</literal>
      або <literal>http://127.0.0.1/hello.php</literal>, але це залежить від
      конфігурації вашого вебсервера. Якщо все встановлено коректно, ваш файл
      повинен оброблятись через PHP та виводитись наступний вміст для браузера:
     </simpara>
     <screen role="html">
<![CDATA[
<!DOCTYPE html>
<html>
    <head>
        <title>Тестуємо PHP</title>
    </head>
    <body>
        <p>Привіт, Світ</p>
    </body>
</html>
]]>
     </screen>
    </example>
   </para>
   <para>
    Цей код надзвичайно простий, а тому вам навіть не потрібно використовувати
    PHP, щоб створити таку сторінку. Все що робить PHP - це виводить:
    <literal>Привіт, Світ</literal> через вираз <function>echo</function>.
    Зауважте, що файл <emphasis>не зобов'язаний бути виконавчим</emphasis>
    або ще якось відрізнятись. Сервер визначив, що цей файл повинен оброблятись
    через PHP, оскільки він має закінчення ".php", про яке в налаштуваннях
    вебсервера сказано, що його повинен обробляти саме PHP. Сприймайте його як
    нормальний файл HTML, що має набір спеціальних тегів, завдяки яким можна
    робити купу цікавих речей.
   </para>
   <para>
    Якщо цей приклад нічого не виводить, чи видається вікно для завантаження,
    або ж весь файл показується в текстовому вигляді, швидше за все, що на
    вашому сервері не активовано підтримку PHP, або його конфігурація не
    правильна. Попросіть адміністратора підключити PHP, використовуючи розділ
    <link linkend="install">Встановлення</link> даного посібника. Якщо ж ви
    розробляєте скрипти PHP вдома (локально), вам також рекомендується
    прочитати цей розділ, щоб пересвідчитись, що ви все налаштували правильно.
    Переконайтесь також, що ви запитуєте доступ до файлу через протокол http.
    Тобто, коли ви просто відкриєте файл через файлову систему, він не буде
    оброблятись PHP. Якщо проблеми все ж залишаються, не соромтесь попросити
    допомоги вибравши один з
    <link xlink:href="&url.php.support;">багатьох доступних способів</link>.
   </para>
   <para>
    Мета прикладу - показати формат спеціальних тегів PHP. Тут ми використали
    <literal>&lt;?php</literal> у ролі відкриваючого тегу. Потім йдуть команди
    PHP, а для завершення PHP-режиму ми додали закриваючий тег
    <literal>?&gt;</literal>. Таким чином, ви можете в будь-якому місці входити
    і виходити з PHP-режиму всередині файлу HTML. Докладніше про це читайте в
    розділі <link linkend="language.basic-syntax">Базовий синтаксис PHP</link>.
   </para>
  
   <note>
    <info><title>Про символ нового рядка</title></info>
    <para>
     Початок нового рядка в HTML має мало значення, та все ж, краще писати більш
     чистий та придатний для читання код HTML завдяки символу нового рядка. PHP
     буде видаляти символ нового рядка, що є одразу після закриваючого тегу
     <literal>?&gt;</literal>. Це може бути надзвичайно корисним, коли ви
     вкладаєте багато блоків PHP чи підключаєте файли, що містять код PHP, який
     нічого не виводить. В той же час, це інколи буває трохи заплутаним. Ви
     можете додавати пробіли після тегу <literal>?&gt;</literal>, щоб виводився
     символ нового рядка після них, або можете явно виводити виводити символ
     нового рядка всередині блока PHP через виклик echo чи print в останній
     команді.
    </para> 
   </note> 

   <note>
    <info><title>Про текстові редактори</title></info>
    <para>
     Є багато текстових редакторів та Інтегрованих Середовищ Розробки
     (англ. - IDE), які можна використовувати для створення, редагування та
     упорядкування файлів PHP. Прогляньте
     <link xlink:href="&url.phpeditorlist;">Список деяких редакторів PHP</link>.
     Якщо ви хочете порекомендувати редактор, будь ласка, відвідайте дану
     сторінку та попросіть додати редактор до списку. Корисно мати редактор з
     підсвічуванням синтаксису.
    </para>
   </note>
   
   <note>
    <info><title>Про текстові процесори</title></info>
    <para>
     Текстові процесори, такі як StarOffice Writer, Microsoft Word та Abiword
     не є оптимальними редакторами для файлів PHP. Якщо все ж вирішите
     використовувати один з них для тестових скриптів, то переконайтесь,
     що ви зберігаєте файл як <emphasis>простий текст</emphasis> (plain text),
     бо інакше PHP не зможе прочитати та виконати цей скрипт.
    </para>
   </note>
  
   <para>
    Тепер, коли ви створили робочий PHP скрипт, прийшов час для створення
    найпопулярнішого PHP скрипта! Зробіть виклик функції
    <function>phpinfo</function> і ви побачите багато корисної інформації про
    вашу систему та налаштування, такі як доступні
    <link linkend="language.variables.predefined">попередньо визначені
    змінні</link>, увімкнені PHP модулі, а також параметри
    <link linkend="configuration">конфігурації</link>. Приділіть деякий час,
    щоб проглянути цю важливу інформацію.
   </para>
   <para>
    <example>
     <info><title>Отримання системної інформації від PHP</title></info>
     <programlisting role="php">
<![CDATA[
<?php phpinfo(); ?>
]]>
     </programlisting>
    </example>
   </para>
  </section>

  <section xml:id="tutorial.useful">
   <info><title>Дещо корисне</title></info>
   <para>
    А тепер зробімо щось корисне. Ми збираємось перевірити, який саме браузер
    використовує відвідувач. Для цього ми перевіримо рядок, який відправляє
    браузер як частину HTTP запиту. Ця інформація зберігається в
    <link linkend="language.variables">змінній</link>. В PHP змінні завжди
    починаються зі знака долара. Зараз нам цікава змінна
    <varname>$_SERVER['HTTP_USER_AGENT']</varname>.
   </para>
   <note>
    <para>
     <varname>$_SERVER</varname> - це спеціальна зарезервована змінна PHP, що
     містить всю інформацію отриману від вебсервера. Її також називають
     суперглобальною. Докладніша інформація є на сторінці
     <link linkend="language.variables.superglobals">Суперглобальні змінні</link>.
    </para>
   </note>
   <para>
    Давайте подивимось на значення цієї змінної:
   </para>
   <para>
    <example>
     <info><title>Друк змінної (елемент масива)</title></info>
    <programlisting role="php">
<![CDATA[
<?php
echo $_SERVER['HTTP_USER_AGENT'];
?>
]]>
    </programlisting>
    <para>
     Скрипт надрукує приблизно таке:
    </para>
    <screen role="html">
<![CDATA[
Mozilla/5.0 (Linux) Firefox/112.0
]]>
    </screen>
   </example>
   </para>
   <para>
    В PHP існує багато <link linkend="language.types">типів</link> змінних. В
    попередньому прикладі ми друкували елемент зі
    змінної-<link linkend="language.types.array">масиву</link>. Масиви можуть
    бути дуже корисними.
   </para>
   <para>
    <varname>$_SERVER</varname> є однією зі змінних, яку PHP автоматично
    створює для вас. Довший список таких змінних можна проглянути в розділі
    <link linkend="reserved.variables">Зарезервовані змінні</link>, або ж ви
    можете роздрукувати весь їхній список, викликавши функцію
    <function>phpinfo</function>, яку ми вже використовували в попередньому
    абзаці.
   </para>
   <para>
    Можна вкладати декілька рядків коду всередині тегів PHP та створювати
    невеликі блоки коду, що можуть робити більше, ніж простий виклик echo.
    Наприклад, якщо ви хочете створити перевірку для Firefox, це можна зробити
    так:
   </para>
   <para>
    <example>
     <info><title>Використання <link linkend="language.control-structures">
     структур контролю</link> та
     <link linkend="language.functions">функцій</link>
     </title>
     </info>
     <programlisting role="php">
<![CDATA[
<?php
if (str_contains($_SERVER['HTTP_USER_AGENT'], 'Firefox')) {
    echo 'Ви використовуєте Firefox.';
}
?>
]]>
     </programlisting>
     <para>
      Результат цього скрипта може бути таким:
     </para>
     <screen role="html">
<![CDATA[
Ви використовуєте Firefox.
]]>
     </screen>
    </example>
   </para>
   <para>
    Тут використовується кілька нових понять. По-перше, це вираз
    <link linkend="control-structures.if">if</link>.
    Якщо ви знайомі з базовим синтаксисом, що використовується в мові C, то цей
    вираз буде для вас теж знайомим. В іншому випадку, вам ймовірно слід
    підібрати підручник з PHP для початківців та прочитати перші кілька
    розділів, або прочитати главу <link linkend="langref">Довідник з PHP</link>
    даного посібника.
   </para>
   <para>
    Друге поняття, яке ми ввели - це виклик функції
    <function>str_contains</function>. Функція <function>str_contains</function>
    вбудована в PHP, вона визначає наявність одного рядка всередині іншого. У
    даному випадку ми шукаємо підрядок <literal>'Firefox'</literal> (т. зв.
    needle, "голку") всередині значення змінної
    <varname>$_SERVER['HTTP_USER_AGENT']</varname> (у т. зв. haystack, "копиці
    сіна"). І якщо підрядок буде знайдено, то функція поверне true. Якщо ні —
    &false;. Якщо ж вона повертає &true;, вираз
    <link linkend="control-structures.if">if</link> буде оцінено як &true;
    (істина) та виконається код всередині {фігурних дужок}. А інакше код
    запускатись не буде. Спробуйте створити аналогічні приклади, використовуючи
    <link linkend="control-structures.if">if</link>, 
    <link linkend="control-structures.else">else</link>, та інші функції такі
    як <function>strtoupper</function> та <function>strlen</function>. В даному
    посібнику є ще багато прикладів, майже для кожної функції. Якщо ви не
    впевнені як використовувати функції, то можна прочитати
    <link linkend="about.prototypes">як читати визначення функцій</link> та
    розділ про <link linkend="language.functions">функції PHP</link>.
   </para>
   <para>
    Ми можемо піти ще далі та показати як можна входити і виходити з режиму PHP
    навіть всередині виразу PHP:
   </para>
   <para>
    <example>
     <info><title>Змішаний код HTML та PHP</title></info>
     <programlisting role="php">

<![CDATA[
<?php
if (str_contains($_SERVER['HTTP_USER_AGENT'], 'Firefox')) {
?>
<h3>str_contains() повернула true</h3>
<p>Ви використовуєте Firefox</p>
<?php
} else {
?>
<h3>str_contains() повернула false</h3>
<p>Ви не використовуєте Firefox</p>
<?php
}
?>
]]>
     </programlisting>
     <para>
      Приклад виводу скрипта:
     </para>
     <screen role="html">
<![CDATA[
<h3>str_contains() повернула true</h3>
<p>Ви використовуєте Firefox</p>
]]>
     </screen>
    </example>
   </para>
   <para>
    Замість того, щоб використовувати в PHP вираз echo для виведення чогось, ми
    вийшли з режиму PHP та безпосередньо відправляємо код HTML. Тут дуже важливо
    відзначити, що таким чином не змінюється логічна структура скрипта. У
    підсумку лише один з блоків HTML буде відправлено в браузер, в залежності
    від результату, поверненого функцією <function>str_contains</function>.
    Іншими словами, це залежить від того, чи буде знайдено рядок
    <literal>Firefox</literal>.
   </para>
  </section>
   
  <section xml:id="tutorial.forms">
   <info><title>Робота з формами</title></info>
   <para>
    Одна з найпотужніших особливостей PHP - це її спосіб обробки HTML-форм.
    Важливо знати, що будь-який елемент форми автоматично стає доступним для
    скрипта PHP. Докладну інформацію та приклади використання форм в PHP можна
    прочитати в розділі <link linkend="language.variables.external">Змінні,
    отримані зі зовнішніх джерел</link>. Тут ми продемонструємо приклади
    HTML-форм:
   </para>
   <para>
    <example>
     <info><title>Проста HTML-форма</title></info>
     <programlisting role="html">
<![CDATA[
<form action="action.php" method="post">
    <label for="name">Ваше ім'я:</label>
    <input name="name" id="name" type="text">

    <label for="age">Ваш вік:</label>
    <input name="age" id="age" type="number">

    <button type="submit">Надіслати</button>
</form>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    В цій формі немає нічого особливого. Це звичайна HTML-форма без будь-яких
    спеціальних тегів. Коли користувач заповнить цю форму і натисне кнопку
    відправлення, буде викликано сторінку <filename>action.php</filename>.
    В цьому файлі можна написати щось таке:
   </para>
   <para>
    <example>
     <info><title>Друк даних з нашої форми</title></info>
     <programlisting role="php">
<![CDATA[
Привіт, <?php echo htmlspecialchars($_POST['name']); ?>.
Вам <?php echo (int)$_POST['age']; ?> років.
]]>
     </programlisting>
     <para>
      Зразок виводу цього скрипта:
     </para>
     <screen role="html">
<![CDATA[
Привіт, Костя. Вам 34 роки.
]]>
     </screen>
    </example>
   </para>
   <para>
    Записи в цьому скрипті, окрім <function>htmlspecialchars</function> та
    <literal>(int)</literal>, мають бути зрозумілими. Функція
    <function>htmlspecialchars</function> гарантує, що будь-який введений
    символ, який є спеціальним в HTML, правильно кодується, щоб ніхто не зміг
    ввести теги HTML чи Javascript на вашій сторінці. Оскільки ми знаємо, що
    поле "age" має бути числовим, ми просто
    <link linkend="language.types.typecasting">конвертуємо</link> його значення
    в <type>int</type>, і таким чином позбуваємось від будь-яких сторонніх
    символів. PHP може це робити автоматично, якщо встановити розширення
    <link linkend="ref.filter">filter</link>. Змінні
    <varname>$_POST['name']</varname> та <varname>$_POST['age']</varname>
    автоматично ініціалізує PHP. Раніше ми використовували суперглобальну
    змінну <varname>$_SERVER</varname>; вище ми ввели просто ще одну
    суперглобальну змінну <varname>$_POST</varname>, котра містить всі
    відправлені POST-дані. Зауважте, що <emphasis>method</emphasis> нашої форми
    вказано як POST. Якщо ми використовуємо метод <emphasis>GET</emphasis>, то
    дані форми будуть знаходитись в іншій суперглобальній змінній — в
    <varname>$_GET</varname>. Ще можна використовувати суперглобальну змінну
    <varname>$_REQUEST</varname>, якщо ви не впевнені, яким методом відправлено
    вам дані. Ця змінна містить об'єднані дані від методів GET, POST та COOKIE.
   </para>
  </section>
  
  <section xml:id="tutorial.whatsnext">
   <info><title>Що далі?</title></info>
   <para>
    Тепер ви отримали знання, які допоможуть вам зрозуміти більшу частину
    матеріалу даного посібника, а також деякі приклади скриптів, що доступні в
    архіві прикладів.
   </para>
   <para>
    Якщо ви хочете проглянути деякі презентації і слайди, що показують більше
    можливостей PHP, то можете проглянути матеріали PHP конференції: 
    <link xlink:href="&url.php.talks;">&url.php.talks;</link>
   </para>
  </section>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
